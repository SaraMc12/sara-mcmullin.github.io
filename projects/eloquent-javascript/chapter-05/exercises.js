// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(arr) {
  return arr.reduce((newArr, element) => {
    if (Array.isArray(element)) {
      newArr = newArr.concat(flatten(element));
    } else {
      newArr.push(element);
    }
    return newArr;
  }, []);
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(test, value, update, body) {
  value = []
  for(let test = 0; test < value; i++){
    if (!test(value[i])) {
      return false;
    }for(let j = 0; j < body; j++){
      if( body === value){
        value.push(update(value))
      }
    } 
    return value
   }

}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(arr, test) {
for(let i = 0; i < arr.length; i++){
  if(!test(arr[i])){
    return false
  }
}
return true
}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(text, uniCode) {
  if (uniCode >= 0x0600 && uniCode <= 0x06FF) {
    return "rtl"; // This is the arabic unicode range
  } else if ((uniCode >= 0x0041 && uniCode <= 0x007A) || (uniCode >= 0x00C0 && uniCode <= 0x017F)) {
    return "ltr"; // This is the Latin unicode range
  } else {
    return "unknown";
  }
}

console.log(dominantDirection(test))

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
